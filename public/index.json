[{"content":"In this project a proof of concept of a basic task application has been developed with the following technologies:\nNuxt3 Pinia LocalForage Bun has also been used for the management of the libraries and the execution of the development environment.\n","permalink":"https://jesusfj710.github.io/projects/serverless-nuxt-to-do-app/","summary":"In this project a proof of concept of a basic task application has been developed with the following technologies:\nNuxt3 Pinia LocalForage Bun has also been used for the management of the libraries and the execution of the development environment.","tags":["nuxt","to-do app","serverless","pinia","localforate","localstorage","nuxtui","bun"],"title":"Serverless To-Do app with Nuxt, LocalForage and Pinia"},{"content":" Introduction Technology Stack Creating the Project with Nuxt3 Managing Data Deploying Changes Future Objectives Introduction After much consideration, I wanted to document the development of an application from start to finish. I had some very specific requirements that I found challenging to address. The most crucial among them was the need for the application to function entirely without a server. In other words, all the code had to be delivered by a static content server.\nThis requirement led me to choose Nuxt3. It allows you to choose from multiple rendering options, and for me, the ability to choose client-side-rendering painlessly is fantastic. The idea is that whatever I develop, I can generate HTML, CSS, and JS that can all be deployed on a static hosting service.\nFor this, I developed a super-simple task management application. The functionality of the application is very basic, serving more as a concept, although I had fun (and struggled) working with TailwindCSS and design in general.\nYou can find the repository here and the application here.\nTechnology Stack I not only had to choose Nuxt3 but also selected other technologies to complement its use. For managing states in Nuxt3, I chose Pinia, a library that makes this very easy for beginners.\nTo persist and manage data, I chose to use LocalForage, allowing you to choose different backends for storage. More details later.\nCreating the Project with Nuxt3 To be honest, I just followed the documentation of Nuxt3 and NuxtUI. If you know how VueJS works, you\u0026rsquo;ll find that there\u0026rsquo;s no mystery here, as Nuxt is a meta-framework that adds more things on top of VueJS, such as the ability to use client-side-rendering very comfortably.\nThe idea was to have a simple task application where I could add new tasks, choose some as favorites, and mark others as completed. All this, of course, fully responsive.\nManaging Data As the application can be used completely offline and there won\u0026rsquo;t be any server, all information needs to be persisted in the user\u0026rsquo;s browser. There are many options, such as using the browser\u0026rsquo;s localStorage, using IndexedDB, and many more.\nSince the application is currently very simple, I implemented LocalForage. It acts as middleware between your application and the backend where you decide to persist the data. Perhaps it\u0026rsquo;s clearer with a diagram:\nto-do appPiniaLocalForagestorageadd new taskadd new taskpersist data LocalForage might seem unnecessary, as we could handle file persistence from Pinia using localStorage without any problem. But I wanted to do it this way because if in the future I decide to change the way data is persisted, I only have to change a small configuration in LocalForage, and the implementation would be agnostic to storage.\nDeploying Changes Here I clearly took inspiration from my previous article. In one repository, I have the code, and each time something is merged into the main branch, the web is built, and it is sent to another repository, which publishes it thanks to GitHub Pages. All the code is free and accessible for anyone to review.\nYou can see the details in this file.\nFuture Objectives The general idea is to have a PWA, with all its tests (unit, component, E2E, etc.), that can work completely offline and might also offer the possibility of synchronizing tasks between devices in the future.\n","permalink":"https://jesusfj710.github.io/blog/to-do-web-application-serverless-nuxt3/","summary":"Introduction Technology Stack Creating the Project with Nuxt3 Managing Data Deploying Changes Future Objectives Introduction After much consideration, I wanted to document the development of an application from start to finish. I had some very specific requirements that I found challenging to address. The most crucial among them was the need for the application to function entirely without a server. In other words, all the code had to be delivered by a static content server.","tags":["nuxt","to-do app","serverless","pinia","localforate","localstorage","nuxtui","bun"],"title":"Serverless web-based to-do application with Nuxt3"},{"content":"In this project a proof of concept of a web testing framework has been developed with the following technologies:\nJava Selenium Cucumber Junit Maven has also been used for the management of the libraries.\nThere is a feature file containing the test scenarios and several step files depending on the functionality you want to test.\nYou can check the README.md of the project to see how to run it on your computer, although it is likely that the locators of the Amazon interface elements have changed since this post was written.\n","permalink":"https://jesusfj710.github.io/projects/java-selenium-cucumber-junit/","summary":"In this project a proof of concept of a web testing framework has been developed with the following technologies:\nJava Selenium Cucumber Junit Maven has also been used for the management of the libraries.\nThere is a feature file containing the test scenarios and several step files depending on the functionality you want to test.\nYou can check the README.md of the project to see how to run it on your computer, although it is likely that the locators of the Amazon interface elements have changed since this post was written.","tags":["java","selenium","cucumber","junit","testing"],"title":"Java Selenium Cucumber Junit framework for simple web testing"},{"content":"2023/08/05 Update: Codeball.ai is no longer available. I have remove the actions related to it but the post will remain as it is for archival purposes.\nHello everyone!\nThe other day I was busy going through some information about Hugo, Github Actions, etc and decided to change the way the website works because it seemed like the right thing to do.\nThe before When I first published the website, everything was contained in a single repository.\nIn this repository I had everything related to Hugo, and the workflow went something like this:\nI started the Hugo server on my local, running hugo serve. I would access my local url and see the server. I would create a branch and make the necessary changes. Review the changes in my locale. Repeat steps 3 and 4 as many times as necessary. Create a commit with the changes and push them to origin on Github. Create a Pull Request. It runs a GHA? of codeball.ai which parses the code and gives you a trust factor. Merge the PR? to main. With each new commit in main, run another GHA that builds the Hugo static files. Basically it runs hugo which generates the public folder. Once the files are generated, they are published to Github Pages with another GHA. This flow actually works well but has several disadvantages. You can\u0026rsquo;t keep the repository private if you want to use Github Pages, you have a lot of codebase and generated files in the same repository, etc.\nWith the new flow, you could have the repository with the static files public, and the original one, which does the build of the web, private (although this is not my case).\nNew workflow In this new workflow we are going to have two repositories, one that is like the old one, where all the Hugo codebase is, and another one where just the web statics will be.\nAnd really, once the changes are implemented, the flow doesn\u0026rsquo;t change much either. The last step of the old flow is where we make changes: now we generate the public folder in the original repository, but we don\u0026rsquo;t publish it. Now it is uploaded to the new repository with a GHA. Once this information is uploaded to the new repository, the publication of the static website is executed.\nThis graphic may explain the flow a little bit, although I\u0026rsquo;m sure it\u0026rsquo;s poorly defined because I never learned sequential diagrams 😅: hugo repopr createdagainst mainGithub Actionsorigin html repocodeball.iapr mergedin maingenerate html contentpush contentreview prpublish in website This is useful if for example we want to hide the original reposition. In my case, I\u0026rsquo;m using codeball.ai and it\u0026rsquo;s only free for the public repos, so for now, I\u0026rsquo;ll keep both repos public, but who knows.\nThat\u0026rsquo;s all, thank you very much for reading!\n","permalink":"https://jesusfj710.github.io/blog/transforming-the-structure-of-the-web-repos/","summary":"2023/08/05 Update: Codeball.ai is no longer available. I have remove the actions related to it but the post will remain as it is for archival purposes.\nHello everyone!\nThe other day I was busy going through some information about Hugo, Github Actions, etc and decided to change the way the website works because it seemed like the right thing to do.\nThe before When I first published the website, everything was contained in a single repository.","tags":["Hugo","Github","Github Actions","codabal.ai","Github Pages"],"title":"Transforming the structure of the web repos"},{"content":"Hello!\nI recently changed my workflow to work with the web, and to show the details, I wanted to insert a graphic. I was using Excalidraw, and the advantage is that you can export it as SVG? .\nLimitations encountered 🚧 When I tried to import the SVG directly into the content of the entry, I ran into some problems. More than problems, they were limitations such as the following:\nThe need to define a background. Limited to a single colour profile. You cannot have one for light mode and one for dark mode. Cannot modify styles, as it was inserted as an \u0026lt;img\u0026gt; tag, which does not support inherited styles (useful info available here). Creating the shortcode 🥾 With the information from the last point in the previous section, we can create our own shortcode. So I decided to apply that and extend the behaviour a bit more. Here\u0026rsquo;s an example using the following snippet:\n{{\u0026lt; svg \u0026#34;static/images/blog/004/example.svg\u0026#34; \u0026gt;}} The first limitation I see in my implementation is the width, which in this example looks clearly huge and is not necessary, so I need to make the width an optional parameter.\nWe moved on from this shortcode that did not allow to set the width (it was predefined as 100% in the styles):\n{{$svg := .Get 0}} \u0026lt;div class=\u0026#34;svg-fill-background\u0026#34;\u0026gt; {{ $svg | readFile | safeHTML }} \u0026lt;/div\u0026gt; To the next one, where we can optionally indicate the percentage width, and the change can be seen below (we could extend this to more properties, but it\u0026rsquo;s not necessary for now):\n{{$svg := .Get 0}} {{$width := .Get 1 | default \u0026#34;100%\u0026#34;}} \u0026lt;div class=\u0026#34;svg-fill-background\u0026#34; style=\u0026#34;width: {{$width}}; margin: 0 auto\u0026#34;\u0026gt; {{ $svg | readFile | safeHTML }} \u0026lt;/div\u0026gt; {{\u0026lt; svg \u0026#34;static/images/blog/004/example.svg\u0026#34; \u0026#34;40%\u0026#34;\u0026gt;}} Light mode and dark mode 🌗 If you switch the web between the two modes, you can see how the graphic changes colour. It actually works as a single SVG graphic that is coloured with CSS? .\nbody .svg-fill-background svg { background: var(--code-bg); max-width: 100%; height: 100%; path { stroke: var(--primary) } text { fill: var(--content) } } You can check how the changes have turned out in the PR I prepared in my Github repository.\nCheers!\n","permalink":"https://jesusfj710.github.io/blog/creating-a-shortcode-to-insert-svg-in-hugo/","summary":"Hello!\nI recently changed my workflow to work with the web, and to show the details, I wanted to insert a graphic. I was using Excalidraw, and the advantage is that you can export it as SVG? .\nLimitations encountered 🚧 When I tried to import the SVG directly into the content of the entry, I ran into some problems. More than problems, they were limitations such as the following:","tags":["Hugo","shortcode","SVG"],"title":"Creating a shortcode to insert SVG in Hugo"},{"content":"Good afternoon, everyone!\nThe other day, I shared on my LinkedIn that I was going to start contributing to FOSS? projects because of the high impact these tools have on my work.\nThe truth is, even a small contribution can help a project cover the cost of a domain or other expenses.\nIn the context of SDET? and the QA? department in IT companies, I believe we rely heavily on these tools, but we usually don\u0026rsquo;t give much back. I understand that for personal projects that we abandon after a few days, we may not consider contributing monetarily (although that\u0026rsquo;s not the only way), but considering the impact and ease they provide us, I think it\u0026rsquo;s the right thing to do.\nLately, all of this has been on my mind, and talking to colleagues at work, I feel that I\u0026rsquo;m not alone in this opinion. The triggering event that made me take the step forward was when the author of Software Testing Weekly newsletter (which I highly recommend) mentioned a couple of weeks ago that the last original maintainer of Cucumber had been laid off and would no longer work on that project apparently (more info here and here).\nCucumber is a tool we use constantly every day in the QA team, and without it, we could say that many of the frameworks we use would also be affected.\nTherefore, I decided to start contributing to Cucumber and Webdriver.io because they are extensive projects, highly flexible, and used by many companies.\nI invite all of you to reflect on this and try, as much as possible, to contribute to these types of projects because in the end, everything has an impact on other projects that private companies will ultimately use without giving credit or returning some of the work to the community. 🥺\nThank you and take care!\n","permalink":"https://jesusfj710.github.io/blog/contributing-to-foss/","summary":"Good afternoon, everyone!\nThe other day, I shared on my LinkedIn that I was going to start contributing to FOSS? projects because of the high impact these tools have on my work.\nThe truth is, even a small contribution can help a project cover the cost of a domain or other expenses.\nIn the context of SDET? and the QA? department in IT companies, I believe we rely heavily on these tools, but we usually don\u0026rsquo;t give much back.","tags":["FOSS","Webdriver.io","Cucumber","QA"],"title":"Contributing to FOSS"},{"content":" ⚠️ Update 04/24/2023 ⚠️: After checking that the charlola theme was actually (without having correctly attributed it) a fork of hugo-PaperMod I decided to change it and update the repository license.\nAfter a long time, I have finally decided to make a website where I can have my own portfolio (in the future) as well as uploading some articles about things I find interesting.\nThe aim is no other than forcing myself to document and explain how I do things and thus be able to share everything.\nBuilding the web The website is built with Hugo which uses Go aka Golang underneath.\nIt\u0026rsquo;s super convenient to be able to write things directly in markdown, upload them to your Github repository, have a Github workflow do the build of the site and publish it directly in less than a minute.\nYou can take a look at the progress of the project in the github repository.\nA big thanks to charlola for his template and instructions on the Hugo theme.\nFeatures of the website Home page with link to my LinkedIn and Github Blog Contact page It will also be available in three languages:\nSpanish English Korean (although the blog will only be in English and Spanish) ","permalink":"https://jesusfj710.github.io/blog/first-post/","summary":"⚠️ Update 04/24/2023 ⚠️: After checking that the charlola theme was actually (without having correctly attributed it) a fork of hugo-PaperMod I decided to change it and update the repository license.\nAfter a long time, I have finally decided to make a website where I can have my own portfolio (in the future) as well as uploading some articles about things I find interesting.\nThe aim is no other than forcing myself to document and explain how I do things and thus be able to share everything.","tags":["blog","Hugo","Github","web"],"title":"First post!"}]