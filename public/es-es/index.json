[{"content":"En este proyecto se ha desarrollado una prueba de concepto de una aplicación de tareas básicas con las siguientes tecnologías:\nNuxt3 Pinia LocalForage También se ha utilizado Bun para la gestión de las librerías y la ejecución del entorno de desarrollo.\n","permalink":"https://jesusfj710.github.io/es-es/projects/serverless-nuxt-to-do-app/","summary":"En este proyecto se ha desarrollado una prueba de concepto de una aplicación de tareas básicas con las siguientes tecnologías:\nNuxt3 Pinia LocalForage También se ha utilizado Bun para la gestión de las librerías y la ejecución del entorno de desarrollo.","tags":["nuxt","to-do app","serverless","pinia","localforate","localstorage","nuxtui","bun"],"title":"Aplicación To-Do sin servidor con Nuxt, LocalForage y Pinia"},{"content":" Introducción Stack tecnológico Creando el proyecto con Nuxt3 Gestionando los datos Desplegando los cambios Objetivos de futuro Introducción Después de darle muchas vueltas, quería hacer el desarrollo de una aplicación desde el principio hasta el final. Tenía unas necesidades muy especificas que me ha costado encontrar como solventarlas. Entre ellas, la más importante es que la aplicación pueda funcionar completamente sin servidor, es decir, todo el código debía ser entregado por una pagina web que pueda desplegar en un servidor de contenido estático.\nEste requisito hizo que aterrizara eligiendo Nuxt3. Te permite elegir entre multiples posibilidades para renderizar tu código, y para mi, poder elegir client-side-rendering sin dolor ninguno es genial. La idea es que desarrolle lo que desarrolle, pueda generar HTML, CSS y JS que todo sea puesto en una web.\nCon todo, he desarrollado una aplicación super simple para gestionar tareas. La funcionalidad de la aplicación es muy básica y solo es como concepto, aunque me he divertido (y sufrido) peleándome con TailwindCSS y el diseño en general.\nEl repositorio lo puedes encontrar aquí y la aplicación aquí.\nStack tecnológico No solo he tenido que elegir Nuxt3, si no que también he escogido otras tecnologías para complementar su uso. Por ejemplo, para gestionar los estados de Nuxt3 he elegido Pinia, una librería que hace muy fácil esto para principiantes.\nPara persistir los datos y gestionarlos, he elegido usar LocalForage, que te permite elegir diferentes \u0026ldquo;back-ends\u0026rdquo; como almacenamiento. Más detalles adelante.\nCreando el proyecto con Nuxt3 La verdad es que solo seguí la documentación de Nuxt3 así como de NuxtUI. Si conoces como funciona VueJS, encontrarás que no hay ningún misterio aquí, ya que Nuxt es un meta-framework que añade más cosas encima de VueJS, como la posibilidad de usar client-side-rendering de manera super cómoda.\nLa idea era tener una aplicación de tareas sencilla, donde pueda añadir nuevas, elegir algunas como favoritas, y realizar otras. Todo esto, por supuesto, full responsive.\nGestionando los datos Como la aplicación puede usarse completamente offline y no va a haber ningún servidor, toda la información necesita ser persistida en el navegador del usuario. Hay muchas opciones, como usar el localStorage del navegador, usar IndexedDB, y miles más.\nDado que de momento la aplicación es super sencilla, implementé LocalForage. Es como un middle-ware entre tu aplicación y el back-end donde decides persistir los datos. Quizá con un gráfico se ve mejor:\nto-do appPiniaLocalForagestorageadd new taskadd new taskpersist data Puede que parezca que LocalForage es algo innecesario, ya que toda la lógica de persistir archivos podríamos hacerla desde Pinia, usando el localStorage sin ningún problema, pero esto es algo que quería hacer así ya que si en un futuro decido cambiar la forma de persistir los datos, solo tengo que cambiar una pequeña configuración en localForage, la implementación sería agnóstica al almacenamiento.\nDesplegando los cambios Aquí he tomado inspiración claramente de mi anterior articulo. En un repositorio tendré el código, y cada vez que algo sea mergeado en la rama principal, se hará build de la web y se enviará a otro repositorio, que lo publicará gracias a las Github Pages. Todo el código está libre y accesible para cualquiera que quiera revisarlo.\nLos detalles los puedes ver en este archivo.\nObjetivos de futuro La idea general es poder tener una PWA, con todos sus tests (unitarios, de componentes, E2E, etc), que pueda funcionar de manera completamente offline, y que quizá también ofrezca la posibilidad de sincronizar tareas entre dispositivos en un futuro.\n","permalink":"https://jesusfj710.github.io/es-es/blog/aplicacion-web-tareas-sin-servidor-nuxt3/","summary":"Introducción Stack tecnológico Creando el proyecto con Nuxt3 Gestionando los datos Desplegando los cambios Objetivos de futuro Introducción Después de darle muchas vueltas, quería hacer el desarrollo de una aplicación desde el principio hasta el final. Tenía unas necesidades muy especificas que me ha costado encontrar como solventarlas. Entre ellas, la más importante es que la aplicación pueda funcionar completamente sin servidor, es decir, todo el código debía ser entregado por una pagina web que pueda desplegar en un servidor de contenido estático.","tags":["nuxt","to-do app","serverless","pinia","localforate","localstorage","nuxtui","bun"],"title":"Aplicación web de tareas sin servidor con Nuxt3"},{"content":"En este proyecto se ha desarrollado una prueba de concepto de un framework de testing para web con las siguientes tecnologías:\nJava Selenium Cucumber Junit También se ha utilizado Maven para la gestión de las librerías.\nHay un archivo feature que contiene los escenarios de prueba y varios archivos de steps en función de la funcionalidad que se quiera probar.\nPuedes revisar el README.md del proyecto para ver cómo ejecutarlo en tu ordenador, aunque es probable que los localizadores de los elementos de la interfaz de Amazon hayan cambiado desde que se escribió este post.\n","permalink":"https://jesusfj710.github.io/es-es/projects/java-selenium-cucumber-junit/","summary":"En este proyecto se ha desarrollado una prueba de concepto de un framework de testing para web con las siguientes tecnologías:\nJava Selenium Cucumber Junit También se ha utilizado Maven para la gestión de las librerías.\nHay un archivo feature que contiene los escenarios de prueba y varios archivos de steps en función de la funcionalidad que se quiera probar.\nPuedes revisar el README.md del proyecto para ver cómo ejecutarlo en tu ordenador, aunque es probable que los localizadores de los elementos de la interfaz de Amazon hayan cambiado desde que se escribió este post.","tags":["java","selenium","cucumber","junit","testing"],"title":"Java Selenium Cucumber Junit framework para pruebas web sencillas"},{"content":"2023/08/05 Actualización: Codeball.ai ya no está disponible. He eliminado las acciones relacionadas con él, pero el post permanecerá tal cual para fines de archivo.\n¡Hola a todos!\nEl otro día me entretuve en revisar información sobre Hugo, Github Actions, etc y decidí cambiar la forma en la que funciona la web porque me parecía que era lo correcto.\nEl antes Cuando publiqué por primera vez la web, todo estaba contenido en un solo repositorio.\nEn este repositorio tenia todo lo relativo a Hugo, y el flujo de trabajo era algo así:\nArrancaba el servidor de Hugo en mi local, ejecutando hugo serve. Accedía a la url de mi local y veía el servidor. Creaba una rama y hacía los cambios necesarios. Revisaba los cambios en mi local. Repetir pasos 3 y 4 tantas veces como sea necesario. Creaba un commit con los cambios y los pusheaba a origin en Github. Creaba una Pull Request. Se ejecuta una Github Action de codeball.ai que analiza el código y te da un factor de confianza. Se mergea la PR? a main. Con cada commit nuevo en main, se ejecuta otra Github Action que hace el build de los archivos estáticos de Hugo. Básicamente ejecuta hugo que genera la carpeta de public. Una vez generados los archivos, se publican en Github Pages con otra Action. Lo cierto es que este flujo funciona bien pero tiene varias desventajas. No puedes tener el repositorio en privado si quieres usar Github Pages, tienes en un mismo repositorio mucho codebase y archivos generados, etc.\nCon el nuevo flujo, podrías tener el repositorio con los archivos estáticos público, y el original, que hace el build de la web, privado (aunque este no sea mi caso).\nNuevo flujo de trabajo En este nuevo flujo vamos a tener dos repositorios, uno que es como el antiguo, donde está todo el codebase de Hugo, y otro donde simplemente estarán los estáticos de la web.\nY realmente, una vez implementados los cambios, tampoco cambia mucho el flujo. En el último paso del antiguo flujo es dónde hacemos cambios: ahora generamos la carpeta public en el repositorio original, pero no la publicamos. Ahora está se sube al repositorio nuevo con una Github Action. Una vez se pushea esta información al nuevo repositorio, se ejecuta la publicación del sitio web estático.\nEste gráfico puede explicar un poquito el flujo, aunque estoy seguro que está mal definido porque nunca llegué a aprender diagramas secuenciales 😅: hugo repopr createdagainst mainGithub Actionsorigin html repocodeball.iapr mergedin maingenerate html contentpush contentreview prpublish in website Esto es útil si por ejemplo queremos ocultar el reposition original. En mi caso, estoy usando codeball.ai y solo es gratis para los repositorios públicos, así que de momento, voy a mantener ambos repos públicos, pero quién sabe.\nEso es todo, ¡muchas gracias por leerme!\n","permalink":"https://jesusfj710.github.io/es-es/blog/transformando-la-structura-de-la-web/","summary":"2023/08/05 Actualización: Codeball.ai ya no está disponible. He eliminado las acciones relacionadas con él, pero el post permanecerá tal cual para fines de archivo.\n¡Hola a todos!\nEl otro día me entretuve en revisar información sobre Hugo, Github Actions, etc y decidí cambiar la forma en la que funciona la web porque me parecía que era lo correcto.\nEl antes Cuando publiqué por primera vez la web, todo estaba contenido en un solo repositorio.","tags":["Hugo","Github","Github Actions","codabal.ai","Github Pages"],"title":"Transformando la estructura de la web"},{"content":"¡Hola!\nRecientemente cambié mi flujo de trabajo para trabajar con la web, y para mostrar los detalles, quería insertar un gráfico. Estaba utilizando Excalidraw, y la ventaja es que puedes exportarlo como SVG? .\nLimitaciones encontradas 🚧 Al intentar importar el SVG directamente en el contenido de la entrada, me encontré con ciertos problemas. Más que problemas, eran limitaciones como las siguientes:\nLa necesidad de definir un fondo. Limitado a un único perfil de color. No se puede tener uno para el modo claro y otro para el modo oscuro. No se pueden modificar los estilos, ya que se insertaba como una etiqueta \u0026lt;img\u0026gt;, que no admite estilos heredados (información útil disponible aquí). Creando el shortcode 🥾 Con la información del último punto en la sección anterior, podemos crear nuestro propio shortcode. Así que decidí aplicar eso y extender un poco más el comportamiento. Aquí tienes un ejemplo utilizando el siguiente fragmento:\n{{\u0026lt; svg \u0026#34;static/images/blog/004/example.svg\u0026#34; \u0026gt;}} La primera limitación que veo en mi implementación es el ancho, que en este ejemplo se ve claramente enorme y no es necesario, así que necesito hacer que el ancho sea un parámetro opcional.\nPasamos de este shortcode que no permitía establecer el ancho (estaba predefinido como 100% en los estilos):\n{{$svg := .Get 0}} \u0026lt;div class=\u0026#34;svg-fill-background\u0026#34;\u0026gt; {{ $svg | readFile | safeHTML }} \u0026lt;/div\u0026gt; Al siguiente, donde sí podemos indicar opcionalmente el porcentaje de ancho, y el cambio se puede ver a continuación (podríamos extender esto a más propiedades, pero no es necesario por ahora):\n{{$svg := .Get 0}} {{$width := .Get 1 | default \u0026#34;100%\u0026#34;}} \u0026lt;div class=\u0026#34;svg-fill-background\u0026#34; style=\u0026#34;width: {{$width}}; margin: 0 auto\u0026#34;\u0026gt; {{ $svg | readFile | safeHTML }} \u0026lt;/div\u0026gt; {{\u0026lt; svg \u0026#34;static/images/blog/004/example.svg\u0026#34; \u0026#34;40%\u0026#34;\u0026gt;}} Modo claro y modo oscuro 🌗 Si cambias la web entre los dos modos, puedes ver cómo el gráfico cambia de color. En realidad, funciona siendo un único gráfico SVG que se colorea con CSS? .\nbody .svg-fill-background svg { background: var(--code-bg); max-width: 100%; height: 100%; path { stroke: var(--primary) } text { fill: var(--content) } } Podeis revisar como han quedado al final los cambios en la PR que preparé en el repositorio de mi Github.\n¡Salud!\n","permalink":"https://jesusfj710.github.io/es-es/blog/creando-un-shortcode-para-insertar-svg-en-hugo/","summary":"¡Hola!\nRecientemente cambié mi flujo de trabajo para trabajar con la web, y para mostrar los detalles, quería insertar un gráfico. Estaba utilizando Excalidraw, y la ventaja es que puedes exportarlo como SVG? .\nLimitaciones encontradas 🚧 Al intentar importar el SVG directamente en el contenido de la entrada, me encontré con ciertos problemas. Más que problemas, eran limitaciones como las siguientes:\nLa necesidad de definir un fondo. Limitado a un único perfil de color.","tags":["Hugo","shortcode","SVG"],"title":"Creando un shortcode para insertar SVG en Hugo"},{"content":"¡Buenas tardes a todos!\nHace poco compartí en mi perfil de LinkedIn que comenzaría a contribuir en proyectos FOSS? debido al impacto significativo que estas herramientas han tenido en mi trabajo.\nAl reflexionar sobre esto, me di cuenta de que incluso una pequeña contribución puede ayudar a un proyecto a financiar un dominio u otras necesidades. Específicamente en el campo de SDET? y el departamento de QA? en las empresas de tecnología, dependemos enormemente de estas herramientas, pero a menudo no contribuimos lo suficiente.\nAunque entiendo que para proyectos personales que abandonamos después de unos días es posible que no consideremos contribuir de manera monetaria (aunque esa no es la única forma), dada la facilidad y el impacto que estas herramientas nos brindan, considero que es lo correcto.\nEstos pensamientos han estado rondando mi cabeza últimamente, y al hablar con mis compañeros de trabajo, siento que no estoy solo en esta opinión. El evento que me impulsó a dar este paso fue cuando, en el boletín de Software Testing Weekly (que recomiendo encarecidamente), el autor mencionó que el último mantenedor original de Cucumber había sido despedido y ya no seguiría trabajando en ese proyecto (más información aquí y aquí).\nCucumber es una herramienta que utilizamos constantemente en nuestro equipo de QA, y sin ella, podríamos decir que muchos de los frameworks que usamos también se verían afectados.\nPor esta razón, decidí comenzar a contribuir en los proyectos Cucumber y Webdriver.io, ya que son proyectos amplios, altamente flexibles y se utilizan en numerosas empresas.\nLos invito a todos a reflexionar sobre este tema e intentar contribuir en la medida de lo posible a este tipo de proyectos, ya que al final todo se traduce en otros proyectos que, tarde o temprano, las empresas privadas utilizarán sin reconocimiento o sin devolver algo a la comunidad. 🥺\n¡Gracias y saludos!\n","permalink":"https://jesusfj710.github.io/es-es/blog/aportando-al-software-libre/","summary":"¡Buenas tardes a todos!\nHace poco compartí en mi perfil de LinkedIn que comenzaría a contribuir en proyectos FOSS? debido al impacto significativo que estas herramientas han tenido en mi trabajo.\nAl reflexionar sobre esto, me di cuenta de que incluso una pequeña contribución puede ayudar a un proyecto a financiar un dominio u otras necesidades. Específicamente en el campo de SDET? y el departamento de QA? en las empresas de tecnología, dependemos enormemente de estas herramientas, pero a menudo no contribuimos lo suficiente.","tags":["FOSS","Webdriver.io","Cucumber","QA"],"title":"Aportando al Software Libre"},{"content":"Pues he añadido el andalúz como idioma a la web como detalle y hacer honor a mi tierra. Me he basado en el EPA, que podeis revisarlo y leer como funciona aquí.\n💚🤍💚 ","permalink":"https://jesusfj710.github.io/es-es/blog/andaluces-levantaos/","summary":"Pues he añadido el andalúz como idioma a la web como detalle y hacer honor a mi tierra. Me he basado en el EPA, que podeis revisarlo y leer como funciona aquí.\n💚🤍💚 ","tags":["web","Hugo","andalûh"],"title":"¡Andaluces levantaos!"},{"content":" ⚠️ Actualización 24/04/2023 ⚠️: Despues de revisar que el tema de charlola era realmente (sin haber atribuido correctamente) un fork de hugo-PaperMod he decidido cambiarlo y actualizar la licencia del repositorio.\nDespues de mucho tiempo, al final he decido hace una web donde pueda tener mi propio portfolio (en un futuro) asi como ir subiendo algun artículo sobre cosas que voy encontrando interesante.\nEl objetivo no es otro que obligarme a documentar y a explicar como hago las cosas y así poder compartir todo.\nConstruyendo la web La web está construida con Hugo que usa Go aka Golang por debajo.\nEs súper cómodo de poder escribir las cosas directamente en markdown, subirlas a tu repositorio de Github, que un workflow de Github te haga el build del sitio y lo publique directamente en menos de un minuto.\nPodeis echar un vistazo al progreso del proyecto en el mismo repositio de Github.\nMil gracias a charlola por su plantilla e instruciones en el tema de Hugo.\nCaracterísticas de la web Página de inicio con enlace a mi LinkedIn y Github Blog Página de contacto También estará disponible en tres idiomas:\nEspañol Inglés Coreano (aunque el blog solo será en inglés y español) ","permalink":"https://jesusfj710.github.io/es-es/blog/primer-post/","summary":"⚠️ Actualización 24/04/2023 ⚠️: Despues de revisar que el tema de charlola era realmente (sin haber atribuido correctamente) un fork de hugo-PaperMod he decidido cambiarlo y actualizar la licencia del repositorio.\nDespues de mucho tiempo, al final he decido hace una web donde pueda tener mi propio portfolio (en un futuro) asi como ir subiendo algun artículo sobre cosas que voy encontrando interesante.\nEl objetivo no es otro que obligarme a documentar y a explicar como hago las cosas y así poder compartir todo.","tags":["blog","Hugo","Github","web"],"title":"¡Primer post!"}]